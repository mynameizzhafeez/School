<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0057)https://codecrunch.comp.nus.edu.sg/task_view.php?tid=4636 -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta http-equiv="pragma" content="no-cache">
<meta http-equiv="expires" content="-1">
<title>CodeCrunch</title>
<!-- START NUS Includes-->
<script type="text/javascript" src="./Cats and Dogs_files/nussearch.js"></script>
<link rel="stylesheet" type="text/css" href="./Cats and Dogs_files/nusbase.css" media="screen, print, projection, handheld">
<link rel="stylesheet" type="text/css" href="./Cats and Dogs_files/nusmenu.css" media="screen, print, projection, handheld">
<link rel="stylesheet" type="text/css" href="./Cats and Dogs_files/nusscreen.css" media="screen, projection, print">
<link href="https://codecrunch.comp.nus.edu.sg/nus/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon">
<link rel="apple-touch-icon" href="https://codecrunch.comp.nus.edu.sg/nus/blank.png">
<!-- END NUS Includes -->
<script type="text/javascript" src="./Cats and Dogs_files/ajax.js"></script>
<script type="text/javascript" src="./Cats and Dogs_files/jquery-1.8.3.min.js"></script>
<script type="text/javascript" src="./Cats and Dogs_files/jquery.tablesorter.min.js"></script>
<script type="text/javascript" src="./Cats and Dogs_files/jquery.tablesorter.pager.js"></script>
<!--<script type="text/javascript" src="/js/folding.js"></script>-->
<script type="text/javascript" src="./Cats and Dogs_files/jquery.watermark.min.js"></script>
<script type="text/javascript">
            function enterPressButton(field, button) {
                $(field).keypress(function(e){if(e.which==13)$(button).trigger("click");});
            }
</script>
<link rel="stylesheet" href="./Cats and Dogs_files/style.css" type="text/css">
<link rel="stylesheet" href="./Cats and Dogs_files/jquery.tablesorter.css" type="text/css">
<script type="text/javascript" src="./Cats and Dogs_files/jquery-1.3.2.min.js"></script>
<!--<script type="text/javascript" src="js/folding.js"></script>-->
<script type="text/javascript" src="./Cats and Dogs_files/jquery.rating.js"></script>
<script type="text/javascript" src="./Cats and Dogs_files/behaviour.js"></script>
<script type="text/javascript" src="./Cats and Dogs_files/textarea_maxlen.js"></script>
<script type="text/javascript" src="./Cats and Dogs_files/jquery.timer.js"></script>

<script type="text/javascript" src="./Cats and Dogs_files/plupload.full.min.js"></script>

<link rel="stylesheet" href="./Cats and Dogs_files/jquery.rating.css" type="text/css">
<link rel="stylesheet" href="./Cats and Dogs_files/style.css" type="text/css">
<link rel="stylesheet" href="./Cats and Dogs_files/tagcloud.css" type="text/css">
<link rel="stylesheet" href="./Cats and Dogs_files/jquery-ui-1.7.2.custom.css" type="text/css">

<link rel="stylesheet" href="./Cats and Dogs_files/jquery.ui.plupload.css" type="text/css">

</head>

<body data-gr-c-s-loaded="true">
<!-- START NUS-Header -->

<!-- NUS Header -->
<div id="nusheader" class="nusbody">
<div class="nuslogodiv">
<a href="http://www.nus.edu.sg/">
<img class="nuslogo" src="./Cats and Dogs_files/soclogo.png" alt="">
</a>
</div>
<div id="nuspointermenu">
<ul>
<li><a href="http://exchange.nus.edu.sg/"><span style="text-transform:none">NUS WebMail</span></a></li>
<li><a href="https://ivle.nus.edu.sg/lms/default.aspx">ivle</a></li>
<li><a href="http://www.lib.nus.edu.sg/">library</a></li>
<li><a href="http://www.nus.edu.sg/campusmap/">maps</a></li>
<!--<li><a href="https://aces01.nus.edu.sg/CoE/jsp/coeMain.jsp">calendar</a></li>-->
<!--<li><a href="/sitemap">sitemap</a></li>-->
<!--<li><a href="#">a-z index</a></li>-->
<!--<li><a href="/contact">contact</a></li>-->
<li><a href="https://codecrunch.comp.nus.edu.sg/task_view.php?tid=4636#" id="rightcorner">&nbsp;</a></li>
</ul>
<br style="clear: left">
</div>
<div id="searchform">
<script src="./Cats and Dogs_files/nussearch.js" type="text/javascript"></script>
<form id="frmSearch" onsubmit="evalSearch();return false" action="https://codecrunch.comp.nus.edu.sg/task_view.php?tid=4636"><div>
<a href="http://www.nus.edu.sg/search/" style="text-decoration:none; font-size:11px; font-weight:bold; color:#666666">Search </a>
<input id="txtKeyword" type="text" value="search for..." onfocus="value=&#39;&#39;" class="equal" size="18">
in
<select id="SearchMenu" name="SearchMenu">
<option selected="selected" value="0">NUS Websites</option>
<option value="1">Internet</option>
<option value="2">Staff Directory</option>
<option value="3">Advanced Search</option>
</select>
<input class="equal" id="Go" src="./Cats and Dogs_files/go.png" type="image">
</div></form>
</div>
</div>

<!-- NUS Local-Navigation --><!--
<div id="nusmenu" class="nusbody"><div id="nusmenu_l"><div id="nusmenu_r">
<ul>
  <li><a href="http://www.comp.nus.edu.sg/index.html">Home</a></li>
  <li><a href="http://www.comp.nus.edu.sg/about.html">About Us</a></li>
  <li><a class="drop" href="javascript:;">Departments</a>
    <ul>
      <li><a href="http://www.comp.nus.edu.sg/cs" >Computer Science</a></li>
      <li><a href="http://www.comp.nus.edu.sg/is/" >Information Systems</a></li>
    </ul>
  </li>
  <li><a href="http://www.comp.nus.edu.sg/undergraduates" >Undergraduate</a></li>
  <li><a href="http://www.comp.nus.edu.sg/graduates" >Graduate</a></li>
  <li><a href="http://www.comp.nus.edu.sg/research" >Research</a></li>
  <li><a href="http://www.comp.nus.edu.sg/entrepreneurship" >Entrepreneurship</a></li>
  <li><a href="http://www.stmi.nus.edu.sg" >Executive Education</a></li>
  <li><a href="http://www.comp.nus.edu.sg/external_relations" >External Relations</a></li>
</ul>
</div></div></div>
-->

<!-- NUS Inner-Title -->
<div id="nustitle" class="nusbody"><div id="nustitle_l"><div id="nustitle_r">
              <h1 id="site-name">
                <a href="https://codecrunch.comp.nus.edu.sg/" title="Home" rel="home">CodeCrunch</a>
              </h1>
</div></div></div>

<!-- END NUS-Header -->

<div id="banner">
        <div id="topmenu">
        <div id="login">
                Logged in as: <strong>e0310357</strong>
                </div>
                <div style="display: block;"><ul>
                                        <li><a href="https://codecrunch.comp.nus.edu.sg/index.php">Home</a></li>
                                                    <li><a href="https://codecrunch.comp.nus.edu.sg/course_viewall.php">Courses</a></li>
                                                                <li><a href="https://codecrunch.comp.nus.edu.sg/tutorial_viewall.php">Tutorials</a></li>
                                                                <li><a href="https://codecrunch.comp.nus.edu.sg/task_viewall.php">Tasks</a></li>
                                                                <li><a href="https://codecrunch.comp.nus.edu.sg/tutorial_browser.php">Browse Tutorials</a></li>
                                                                <li><a href="https://codecrunch.comp.nus.edu.sg/user_viewsubmissions.php">My Submissions</a></li>
                                                                <li><a href="https://codecrunch.comp.nus.edu.sg/tools.php">Tools</a></li>
                                                <li><a href="https://codecrunch.comp.nus.edu.sg/logout_process.php">Logout</a></li>
                            </ul></div>
        </div>
</div>
<div id="container">
<div id="outer">
<div id="inner">
	<div id="content_full">                         
		<div class="content-header"><h3>CS2030 Lab #5 (Optional)</h3></div>
		<div class="spacer"></div>
		<table width="100%" cellpadding="0" cellspacing="0" border="0">
			<tbody><tr><td valign="top" style="width: 30%;">
				<div class="meta_header">Tags &amp; Categories</div>
				<div id="classifyList"><span class="value">Tags:
</span>
<span class="value">Categories:
</span></div>
			</td>
			<td valign="top" style="width: 40%;">
				<div class="meta_header">Related Tutorials</div>
				<div id="tutorialList"></div>
			</td>
			<td valign="top" style="width: 30%;">
			</td>
			</tr>
		</tbody></table>
		<div class="content-header">
			<h3>Task Content
							</h3>
		</div>                          
		<div class="panel"><div class="task-content">
		<h3>Cats and Dogs</h3>

<p><b>Topic Coverage</b>
</p><ul>
  <li>Collections</li>
  <li>Abstract Classes</li>
  <li>File I/O</li>
  <li>Exceptions</li>
</ul>

<h3>Problem Description</h3>

<p>
  You now own a farm. In this farm, you can have cats and dogs. To feed your
  farm animals, you may have tuna, chocolate and cheese in your farm.
</p>
<p>
  However, you are not allowed to interact directly with this farm. Instead,
  you are given divine scrolls that give you the power to create animals and
  food in your farm and to instruct the animals to do certain tasks.
</p>
<p>
  The behaviours and attributes of each animal and food item is defined below. Note that
  aside from those listed below, <strong>no additional food items or animals will be 
  defined</strong>
</p>

Cat:
<ul>
  <li>
    Cats have a name, an appetite (the amount of food it can eat in
    its lifetime), and a colour (can be any string of text).
  </li>
  <li>All cats can only meow.</li>
  <li>Cats can eat tuna and chocolate.</li>
  <li>
    When cats greet (by saying meow), they get lazy
    afterwards. When a cat is lazy and is asked to greet, it does not
    do anything, but stops being lazy. <strong>Cats start off as not lazy</strong>.
  </li>
</ul>

Dog:
<ul>
  <li>
    Dogs have a name, an appetite (the amount of food it can eat in
    its lifetime), and a specific sound.
  </li>
  <li>Dogs do not have a specified colour.</li>
  <li>Dogs can eat tuna and cheese.</li>
  <li>
    Dogs can eat food and greet (by making its sound). Every time
    a dog greets, it will make more of the same sound in the future.<br>
    i.e., if it greets with woof now, it will greet with woofwoof the second time, and then woofwoofwoof
    the third time, and so on.
  </li>
</ul>

Tuna:
<ul>
  <li>
    Each can of tuna has a brand associated with it.
  </li>
</ul>

Cheese:
<ul>
  <li>
    Each slice of cheese has a brand associated with it.
  </li>
</ul>

Chocolate:
<ul>
  <li>
    Each piece of chocolate has a brand and flavour associated with it.
  </li>
</ul>

<p>
  The divine scrolls are very specific in their instructions. They come in
  the following format:
</p>
<p>
<tt>new dog [Name] [appetite] [sound]</tt> creates a new dog. For example:<br>
<tt>new dog Doggie 3 woof</tt> creates a new dog called Doggie that can eat
3 food items in its lifetime, and makes the sound woof.
</p>
<p>
  <tt>new cat [Name] [appetite] [colour]</tt> creates a new cat. For example:<br>
  <tt>new cat Kitty 2 black</tt> creates a new black cat called Kitty that can eat
  2 food items in its lifetime, and makes the sound meow.
</p>
<p>
  <tt>add cheese [Brandname]</tt> adds new cheese. For example:<br>
  <tt>add cheese Magnolia</tt> adds a slice of Magnolia cheese to the farm for
  the animals' consumption.
</p>

<p>
  <tt>add tuna [Brandname]</tt> adds new tuna. For example:<br>
  <tt>add tuna Ayam</tt> adds a can of Ayam brand tuna to the farm for
  the animals' consumption.
</p>

<p>
  <tt>add chocolate [Brandname] [flavour]</tt> adds new chocolate. For example:<br>
  <tt>add chocolate Cadbury dark</tt> adds a piece of Cadbury dark chocolate to the farm for
  the animals' consumption.
</p>

<p>
  <tt>eat</tt> instructs all animals to eat from the food in the farm. Animals get to eat in
  order of the natural ordering of their names (lexicological order). That means that a cat
  named Aaron will get to eat before a dog named Brad, and a dog named Angeline will get to
  eat before a cat named Zenedine.<br>
  An animal will continue to eat until it is full, or 
  when it cannot eat the rest of the food items in the farm. The next animal
  in line will then get to eat.<br>
  The food is eaten in order of them being created. Once a food item is eaten, it disappears
  and can no longer be eaten again. 
</p>

<p>
  <tt>greet</tt> instructs all animals in the farm to make a sound. Animals make sounds in order
  of the natural ordering of their names (lexicological order), much like the order in which they
  eat.
</p>

<p>
  Even though the scrolls are divine, their authors make mistakes occasionally, much like
  the people who made this question. The following are mistakes that they may make:
  </p><ul>
    <li>The first word is not add, new, eat or greet.</li>
    <li>If the first word is add or new, a wrong animal/food item is used as the second word of the instruction.</li>
    <li>If the first word is add or new, not enough arguments are present in the instructions.</li>
  </ul>
  In any of these cases, you must remind the authors that an illegal instruction was made, so that they may
  take note to not repeat the same mistakes in the future. However, the remaining instructions should still
  be carried out.
<p></p>

<h3>Task</h3>

<p>
  Write a program that reads instructions for the farm using a scroll. The output should then
  contain the happenings of the farm and appropriate Exceptions to indicate illegal instrutions.
</p>

<p>
  Take note of the following assumptions:
  </p><ul>
  <li>
    Aside from the aforementioned mistakes in the scroll, there is no need to perform
    other input validation in this exercise.
  </li>
	<li>The maximum number of animals and food items is unknown.</li>
  </ul>
<p></p>

The following "scroll"
<pre>new cat Kitty 2 grey
new duck Duckie 400 quack
new dog
new dog Doggie 3 woof
cs2030ezpz
greet
add tuna Ayam
add biscuits Oreo
add chocolate Cadbury milk
add chocolate Mars
add cheese Magnolia
add cheese Marigold
add cheese Magnolia
add tuna Ayam
eat
greet
</pre>

will produce the following output:

<pre>Kitty(grey) was created
duck is not a valid species
Too few arguments
Doggie was created
cs2030ezpz is not a valid instruction
Doggie says woof
Kitty(grey) says meow and gets lazy
Ayam tuna was added
biscuits is not a valid food type
Cadbury milk chocolate was added
Too few arguments
Magnolia cheese was added
Marigold cheese was added
Magnolia cheese was added
Ayam tuna was added
Doggie eats Ayam tuna
Doggie eats Magnolia cheese
Doggie eats Marigold cheese
Kitty(grey) eats Cadbury milk chocolate
Kitty(grey) eats Ayam tuna
Doggie says woofwoof
Kitty(grey) is lazy
</pre>

<p>
    This task is divided into several levels. 
    Read through all the levels to see how the different levels are related. 
    You are to complete <strong>ALL</strong> levels.
</p>

<p></p><table border="1" cellpadding="10">

<tbody><tr><td><h4>Level 1</h4>

<p>
  <big><strong>Defining Food Items</strong></big>
</p>

<p>
  The first thing we'd want to do is to define each food item. This is because
  animals will depend on these classes down the line, and we'd want to test the
  animal classes with the food items in mind.
</p>

<p>
  We are going to define a <tt>Food</tt> class where each food item will
  inherit from. This follows the Open-Closed and Liskov Substitution Principles nicely,
  and subsequently, you'll observe that these will come in handy when animals attempt
  to eat these Foods.
</p>

<p>
  The <tt>Food</tt> class will have attributes and methods depending on your implementation.
  You should also have the <tt>Cheese</tt>, <tt>Tuna</tt> and <tt>Chocolate</tt> subclasses
  which all extend the <tt>Food</tt> class as well.
</p>

<p>
  You should understand that these classes are required as different food types may have more or less attributes than the <tt>Food</tt> class.
</p>

<p></p><table border="1" width="300">

<tbody><tr><td><pre>$ jshell -q your_files_in_ascending_dependency_order
jshell&gt; Food cheese = new Cheese("Magnolia");
jshell&gt; Food choc = new Chocolate("Cadbury", "Dark");
jshell&gt; Food tuna = new Tuna("Ayam");
jshell&gt; cheese
cheese ==&gt; Magnolia cheese
jshell&gt; choc
choc ==&gt; Cadbury Dark chocolate
jshell&gt; tuna
tuna ==&gt; Ayam tuna
jshell&gt; /exit
</pre>

</td></tr></tbody></table>

</td></tr><tr><td><h4>Level 2</h4>
<p>
  <big><strong>Creating new animals</strong></big>
</p>

<p>
  Now we are going to define classes for the Animals. Once again, we are going to
  have an <tt>Animal</tt> class with the <tt>Cat</tt> and <tt>Dog</tt> class
  inheriting from them.
</p>

<p>
  For this level, we are simply defining the <tt>greet</tt> method for each animal.
  We will test the eating functions of each animal in the subsequent levels.
</p>


<p></p><table border="1" width="300">

<tbody><tr><td><pre>$ jshell -q your_files_in_ascending_dependency_order
jshell&gt; Animal cat = new Cat("Meowie", 5, "Red")
jshell&gt; Animal dog = new Dog("Doggie", 3, "Woof!")
jshell&gt; cat
cat ==&gt; Meowie(Red)
jshell&gt; dog
dog ==&gt; Doggie
jshell&gt; cat.greet()
Meowie(Red) says meow and gets lazy
jshell&gt; cat.greet()
Meowie(Red) is lazy
jshell&gt; cat.greet()
Meowie(Red) says meow and gets lazy
jshell&gt; dog.greet()
Doggie says Woof!
jshell&gt; dog.greet()
Doggie says Woof!Woof!
jshell&gt; /exit
</pre>

</td></tr></tbody></table>

<p>
Note that <tt>Meowie</tt> gets lazy when it is asked to greet. If <tt>Meowie</tt> is already
lazy, then it will not say anything, but will become not lazy.
</p>
<p>
Meanwhile, <tt>Doggie</tt> will always greet with <tt>Woof!</tt>, but every time it is told to greet,
it becomes more excited, and repeats that sound more when it is told to greet again.
</p>


</td></tr><tr><td><h4>Level 3</h4>

<p>
  <big><strong>Eating food items</strong></big>
</p>

<p>
  We are now going to define the behaviour of animals eating. Cats and dogs will
  eat any amount of food until it is full. If the animal is told to eat a food item
  which its species cannot eat, or if it has ate beyond its supposed appetite, a 
  <tt>CannotEatException</tt> will be thrown, with an error message saying that the
  animal cannot eat that particular food item.
</p>

<p>
To avoid cyclic dependencies, <strong>you are to create the <tt>CannotEatException</tt> with only the 
  error message as a String, rather than storing the <tt>Animal</tt> and <tt>Food</tt></strong>.
  However, in the ideal scenario, we would be able to store the Animal and Food in the exception, and
  generate the String in <tt>getMessage</tt>
</p>

<p></p><table border="1" width="300">

<tbody><tr><td><pre>$ jshell -q your_files_in_ascending_dependency_order
jshell&gt; Dog dog = new Dog("A", 2, "Woof!");
jshell&gt; try {
   ...&gt;     dog.eat(new Cheese("Magnolia"));
   ...&gt; } catch (CannotEatException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
A eats Magnolia cheese
jshell&gt; try {
   ...&gt;     dog.eat(new Chocolate("Cadbury", "Dark"));
   ...&gt; } catch (CannotEatException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
A cannot eat Cadbury Dark chocolate
jshell&gt; try {
   ...&gt;     dog.eat(new Tuna("Ayam"));
   ...&gt; } catch (CannotEatException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
A eats Ayam tuna
jshell&gt; try {
   ...&gt;     dog.eat(new Cheese("Marigold"));
   ...&gt; } catch (CannotEatException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
A cannot eat Marigold cheese as it is full
jshell&gt; Cat cat = new Cat("Meowie", 1, "Black");
jshell&gt; try {
   ...&gt;     cat.eat(new Tuna("Brands"));
   ...&gt; } catch (CannotEatException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
Meowie(Black) eats Brands tuna
jshell&gt; try {
   ...&gt;     cat.eat(new Cheese("Magnolia"));
   ...&gt; } catch (CannotEatException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
Meowie(Black) cannot eat Magnolia cheese
jshell&gt; try {
   ...&gt;     cat.eat(new Chocolate("Hershey's", "Milk"));
   ...&gt; } catch (CannotEatException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
Meowie(Black) cannot eat Hershey's Milk chocolate as it is full
jshell&gt; /exit
</pre>

</td></tr></tbody></table>
<p>
Note that Dogs cannot eat Chocolate, and hence <tt>A</tt> does not eat the Chocolate.
Cats also cannot eat cheese. In both cases, both <tt>A</tt> and <tt>Meowie</tt> stop eating
as they are full.
</p>
</td></tr><tr><td><h4>Level 4</h4>

<p>
  <big><strong>Creating the Farm</strong></big>
</p>

<p>
Now we can begin creating the <tt>Farm</tt>. Remember, the only way we can interact
with a farm is by giving it an instruction. This will be taken in as a string.
</p>

<p>
If an instruction given is invalid, the method should throw an <tt>IllegalInstructionException</tt>.
</p>

<p>
   The Farm should maintain its animals in sorted order of names, while the food items are
   sorted by order of creation. The <tt>Collections.sort()</tt> method
   may be of use to you.
</p>

<p></p><table border="1" width="300">
<tbody><tr><td><pre>$ jshell -q your_files_in_ascending_dependency_order
jshell&gt; Farm f = new Farm();
jshell&gt; f.runInstruction("new cat Kitty 1 grey");
Kitty(grey) was created
jshell&gt; f.runInstruction("new dog Doggie 3 woof");
Doggie was created
jshell&gt; f.runInstruction("add chocolate Cadbury dark");
Cadbury dark chocolate was added
jshell&gt; f.runInstruction("add cheese Magnolia");
Magnolia cheese was added
jshell&gt; f.runInstruction("add tuna Ayam");
Ayam tuna was added
jshell&gt; f
f ==&gt; Animals:
Doggie
Kitty(grey)

Food:
Cadbury dark chocolate
Magnolia cheese
Ayam tuna
jshell&gt; try {
   ...&gt;     f.runInstruction("new duck");
   ...&gt; } catch (IllegalInstructionException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
duck is not a valid species
jshell&gt; try {
   ...&gt;     f.runInstruction("add food");
   ...&gt; } catch (IllegalInstructionException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
food is not a valid food type
jshell&gt; try {
   ...&gt;     f.runInstruction("new dog Doggie 3");
   ...&gt; } catch (IllegalInstructionException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
Too few arguments
jshell&gt; try {
   ...&gt;     f.runInstruction("add chocolate Cadbury");
   ...&gt; } catch (IllegalInstructionException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
Too few arguments
jshell&gt; f.runInstruction("eat");
Doggie eats Magnolia cheese
Doggie eats Ayam tuna
Kitty(grey) eats Cadbury dark chocolate
jshell&gt; f.runInstruction("greet");
Doggie says woof
Kitty(grey) says meow and gets lazy
jshell&gt; try {
   ...&gt;     f.runInstruction("meow");
   ...&gt; } catch (IllegalInstructionException e) {
   ...&gt;     System.err.println(e.getMessage());
   ...&gt; }
meow is not a valid instruction
jshell&gt; /exit
</pre>
</td></tr></tbody></table>

<p>
  Note that no <tt>CannotEatException</tt> is thrown to us. This should be abstracted
  away from the client (us, or the Farm class).
</p>

</td></tr><tr><td><h4>Level 5</h4>
<p>
  <big><strong>Completing the program</strong></big>
</p>
<p>
  Write a program that reads in a scroll, with possible mistakes defined in the
  problem description.
  Then, print the happenings of the farm.
</p>

<p>
  Please use <tt>System.err.println</tt> for printing error messages. Note that
  <tt>IllegalInstructionException</tt>s should not terminate the program.
</p>

<p>
  Note that the divine scroll comes in a text document, and should be passed in as
  a command-line argument. We do so by running </p><pre>$ java Main text_file</pre>
<p></p>

<p>
  The command-line arguments are passed into the <tt>args</tt> variable. Thus,
  if we ran </p><pre>$ java Main divine.scroll</pre> <tt>divine.scroll</tt> can be accessed
  with <tt>args[0]</tt> in our <tt>main</tt> method.
<p></p>

<p>
  To read the text document, we may use the <tt>BufferedReader</tt> class. One way to
  read the document is by doing:
  </p><pre>BufferedReader scroll = new BufferedReader(new FileReader(args[0]));</pre>
  Note that <tt>FileReader</tt>, <tt>BufferedReader</tt> and <tt>IOException</tt> can
  be imported from <tt>java.io</tt>.
<p></p>
<p>
  Finally, to read a line in the scroll, we do </p><pre>String line = scroll.readLine()</pre>
<p></p>

<p>The following is a sample run of the program, using pre-defined scrolls.

</p><p></p><table border="1" width="300">

<tbody><tr><td><pre>$ cat divine.scroll
new cat Kitty 2 grey
new duck Duckie 400 quack
new dog
new dog Doggie 3 woof
cs2030ezpz
greet
add tuna Ayam
add biscuits Oreo
add chocolate Cadbury milk
add chocolate Mars
add cheese Magnolia
add cheese Marigold
add cheese Magnolia
add tuna Ayam
eat
greet

$ java Main divine.scroll
Kitty(grey) was created
duck is not a valid species
Too few arguments
Doggie was created
cs2030ezpz is not a valid instruction
Doggie says woof
Kitty(grey) says meow and gets lazy
Ayam tuna was added
biscuits is not a valid food type
Cadbury milk chocolate was added
Too few arguments
Magnolia cheese was added
Marigold cheese was added
Magnolia cheese was added
Ayam tuna was added
Doggie eats Ayam tuna
Doggie eats Magnolia cheese
Doggie eats Marigold cheese
Kitty(grey) eats Cadbury milk chocolate
Kitty(grey) eats Ayam tuna
Doggie says woofwoof
Kitty(grey) is lazy

</pre>

</td></tr></tbody></table>

</td></tr></tbody></table>
		</div></div>                          
					<div class="content-header">
					<h3>Submission (Practice)</h3>
			</div>
			<div id="practiceNotification"></div>
			<div class="panel">
				<span class="label" style="vertical-align:top">Your Files:</span>
				<span class="value-long">
					<div id="plupload_container" style="position: relative;">
						<a id="task_submission" href="javascript:;" class="submitButton" style="position: relative; z-index: 1;">BROWSE</a>
					<div id="html5_1e5cf5oum1n4t4ljfpu1pri60s4_container" class="moxie-shim moxie-shim-html5" style="position: absolute; top: -7px; left: 0px; width: 103px; height: 28px; overflow: hidden; z-index: 0;"><input id="html5_1e5cf5oum1n4t4ljfpu1pri60s4" type="file" style="font-size: 999px; opacity: 0; position: absolute; top: 0px; left: 0px; width: 100%; height: 100%;" multiple="" accept=".java,.c,.cpp,.h,.py,.jar" tabindex="-1"></div></div>
					<br>
					<div id="filelist"></div>
					<script type="text/javascript">
						var uploader;
						$(document).ready(function() {		
							uploader = new plupload.Uploader({
								runtimes: 'html5,flash,html4',
								browse_button: 'task_submission',
								container: 'plupload_container',
								prevent_duplicates: true,
								url: 'plupload/uploadFiles.php',

								filters: {
									max_file_size: '31457280', 
									mime_types: [
										{title : "Allowed files", extensions : "java,c,cpp,h,py,jar"}	
									]
								},

								init: {
									PostInit: function () {
										document.getElementById('filelist').innerHTML = '';
									},

									FilesAdded: function (up, files) {
										plupload.each(files, function(file) {
											document.getElementById('filelist').innerHTML += 
												'<li class="plupload_file ui-state-default plupload_delete" id="' + file.id + '" class="plupload_file_name">' +  
													'<div class="plupload_file_status">' +
														'<div class="plupload_file_action">' + 
															'<div class="plupload_action_icon ui-icon ui-icon-circle-close" onclick="uploader.removeFile(uploader.getFile(\''+file.id+'\'));"> </div>' + 
														'</div>' +
														'<div class="plupload_file_name" title="' + file.name + '">' + 
															'<span class="plupload_file_name_wrapper">' + file.name + '   (<i>' + plupload.formatSize(file.size) + '</i>) <b></b>' + '</span>' +
														'</div>' +
													'</div>' +
												'</li>';
										});
										document.getElementById('filelist').innerHTML = '<ul class="plupload_filelist_content" id="uploader_filelist" unselectable="on">' + document.getElementById('filelist').innerHTML + '</ul>';

									},

									FilesRemoved: function(up, files) {
										plupload.each(files, function(file) {
											$('#' + file.id).remove();
										});
									},

									FileUploaded: function(up, file, info) {
										$('#' + file.id).remove();
									},

									UploadProgress: function(up, file) {
										$('#' + file.id + ' b')[0].innerHTML = '<span>' + file.percent + "%</span>";
									},

									UploadComplete: function(up, files) {
										doTaskGrade();
									},

									Error: function(up, err) {
										alert("\nError #" + err.code + ": " + err.message);
									}
								}
							});
							uploader.init();


						});

					</script><br>
					<p><a href="javascript:uploader.setOption(&#39;multipart_params&#39;, { &#39;sess_id&#39;: &#39;mb00urn4ahqfj2erlg9plkqhp872sjig&#39;, &#39;type&#39;: &#39;task_submission&#39;, &#39;tid&#39;: &#39;4636&#39;, &#39;username&#39;: &#39;e0310357&#39;, &#39;uid&#39;: &#39;17287&#39; }); javascript:uploader.start();" class="submitButton">SUBMIT</a>
					(only .java, .c,  .cpp, .h, and .py extensions allowed)</p>
				</span>
				<br>
				<span class="label">&nbsp;</span>
				<span class="value-long" style="font-size: 90%; color: #777;">To submit multiple files, click on the Browse button, then select one or more
				files. The selected file(s) will be added to the upload queue. You can repeat this step to add more files. Check that you have all the files
				needed for your submission. Then click on the Submit button to upload your submission.</span>
			</div>
        							<input type="hidden" id="tid" name="tid" value="4636">
		</div>
		<!-- end content -->
</div>
<!-- end inner -->
<div id="loading-mask">
        <p id="loading_mask_loader" class="loader" style="display: none;"> <img alt="Loading..." src="./Cats and Dogs_files/ajax-loader-tr.gif"> <br>
                Please wait... </p>
</div>
<script type="text/javascript">
$(".star").rating({
        focus: function(value, link) {
                var tip = $("#rating_text");
                tip[0].data = tip[0].data || tip.html(); 
                tip.html(link.title || "value: " + value);
        },
        blur: function(value, link) {
                var tip = $("#rating_text");
                $("#rating_text").html(tip[0].data || "");
        },
        callback: function(value, link) {
                $.ajax({
                        type: "POST",
                        url: "task_updaterating.php",
                        data: ({tid:$("#tid").val(), rating:value}),
                        success: function(html) {
                                var msg = html.split(";");
                                $("#rating_text").removeClass().addClass(msg[0]);
                                $("#rating_text").html(msg[1]);
                        }
                });
        }
});

function getComments() {
        $.ajax({
                type: "POST",
                url: "task_getcomments.php",
                data: ({tid:$("#tid").val()}),
                success: function(html) {
                        $("#commentList").html(html);
                }
        });
}

function doTaskGrade(e, d) {
        $.ajax({
                type: "POST",
                url: "doTaskGrade.php",
                data: ({tid:$("#tid").val()}),
                success: function(html) {
                        var msg = html.split(";");
                        $("#practiceNotification").removeClass().addClass(msg[0]);
                        $("#practiceNotification").html(msg[1]);
                }
        });

}

function doCourseTaskGrade(e, d) {
        $.ajax({
                type: "POST",
                url: "doTaskGrade.php",
                data: ({tid:$("#tid").val(), course_id:$("#course_id").val(), do_course:1}),
                success: function(html) {
                        var msg = html.split(";");
                        $("#courseNotification").removeClass().addClass(msg[0]);
                        $("#courseNotification").html(msg[1]);
                }
        });

}

function addComment() {
        $.ajax({
                type: "POST",
                url: "task_addcomment.php",
                data: ({tid:$("#tid").val(), comment:encodeURIComponent($("#comment").val())}),
                success: function(html) {
                        var msg = html.split(";");
                        $("#commentNotification").removeClass().addClass(msg[0]);
                        $("#commentNotification").html(msg[1]);
                        
                        getComments();
                }
        });
}

function deleteComment(c) {
        $.ajax({
                type: "POST",
                url: "task_deletecomment.php",
                data: ({comment_id:c}),
                success: function(html) {
                        var msg = html.split(";");
                        $("#commentNotification").removeClass().addClass(msg[0]);
                        $("#commentNotification").html(msg[1]);
                        
                        getComments();
                }
        });
}

function getClassify(){
                $.ajax({
                type: "GET",
                url: "task_classify.php",
                data: ({tid:$("#tid").val()}),
                success: function(html) {
                        $("#classifyList").html(html);
                }
        });
}

function getTutorial(){
        $.ajax({
                type: "POST",
                url: "task_gettutorials.php",
                data: ({tid:$("#tid").val()}),
                success: function(html) {
                        $("#tutorialList").html(html);
                }
        });
}

function getQueries() {
        $.ajax({
                type: "POST",
                url: "task_getqueries.php",
                data: ({tid:$("#tid").val()}),
                success: function(html) {
                        $("#queryList").html(html);
                }
        });
}

function addQuery() {
        $.ajax({
                type: "POST",
                url: "task_addquery.php",
                data: ({tid:$("#tid").val(), contest_id:$("#contest_id").val(), query:encodeURIComponent($("#query").val())}),
                success: function(html) {
                        var msg = html.split(";");
                        $("#queryNotification").removeClass().addClass(msg[0]);
                        $("#queryNotification").html(msg[1]);
                        
                        getQueries();
                }
        });
}

function deleteQuery(q) {
        $.ajax({
                type: "POST",
                url: "task_deletequery.php",
                data: ({query_id:q}),
                success: function(html) {
                        var msg = html.split(";");
                        $("#queryNotification").removeClass().addClass(msg[0]);
                        $("#queryNotification").html(msg[1]);
                        
                        getQueries();
                }
        });
}

function addTag() {
        $.ajax({
                type: "POST",
                url: "tag_add.php",
                data: ({tid:$("#tid").val(), tags:$("#tagwords").val()}),
                success: function(html) {
                        var msg = html.split(";");
                        $("#tagNotification").removeClass().addClass(msg[0]);
                        $("#tagNotification").html(msg[1]);
                        
                        getClassify();
                }
        });
}


$(document).ready(function() {
        getComments();
        getQueries();
        getClassify();
        getTutorial();
        //getCloud();
});

$(document).everyTime(60000, function(i) {
        if ($("#tid").val() != "" && $("#tid").val() != null) {
                $.ajax({
                        type: "POST",
                        url: "task_checkcontest.php",
                        data: ({tid:$("#tid").val()}),
                        success: function(html) {
                                if (html == "0") {
                                        $("#contest_submit").html("");
                                }
                        }
                });
                $.ajax({
                        type: "POST",
                        url: "task_checkcourse.php",
                        data: ({tid:$("#tid").val()}),
                        success: function(html) {
                                if (html == "0") {
                                        $("#course_submit").html("");
                                }
                        }
                });
        }
}, 0);

$('#loading_mask_loader')
        .hide()  // hide it initially
        .ajaxStart(function() {
                $(this).show();
        })
        .ajaxStop(function() {
                $(this).hide();
        });
        
</script>


</div> <!-- end outer -->

</div> <!-- end container -->

<!-- START NUS-Footer --> 
<div id="nusfooter" class="nusbody">
<div id="nusfooter_ml"><div id="nusfooter_mr">
<div id="nusfooter_tc"><div id="nusfooter_tl"><div id="nusfooter_tr">
<div id="nusfooter_bc"><div id="nusfooter_bl"><div id="nusfooter_br">
<div class="inner"><div class="left"><p>© Copyright 2009-2020 National University of Singapore. All Rights Reserved.</p>  
<p class="nusfooterlinks">
<a href="http://www.nus.edu.sg/terms.php">Terms of Use</a> |
<a href="http://www.nus.edu.sg/policy.php">Privacy</a> |
<a href="http://www.nus.edu.sg/nondiscrim.php">Non-discrimination</a></p> 
</div>    
<div class="right">
<a href="https://mysoc.nus.edu.sg/">MySoC</a> |
<a href="https://docs.comp.nus.edu.sg/cf/">Computing Facilities</a> |
<a href="http://www.nus.edu.sg/search/">Search</a> |
<a href="http://www.nus.edu.sg/campusmap/">Campus Map</a>
<p>School of Computing, National University of Singapore</p>
</div>    
<div style="clear: both;"> </div>
</div>
</div></div></div>
</div></div></div>
</div></div>
</div>
<!-- END NUS-Footer -->

</body></html>